"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Display class
 */
const os = require("os");
const errorHandler_1 = require("unitejs-framework/dist/helpers/errorHandler");
// tslint:disable:no-console
class DisplayLogger {
    constructor(process, noColor, logPrefix) {
        this._colorsOn = this.calculateColors(process, noColor);
        this._logPrefix = logPrefix || "";
        this._colors = {
            reset: { start: 0, stop: 0 },
            bold: { start: 1, stop: 22 },
            dim: { start: 2, stop: 22 },
            italic: { start: 3, stop: 23 },
            underline: { start: 4, stop: 24 },
            inverse: { start: 7, stop: 27 },
            hidden: { start: 8, stop: 28 },
            strikethrough: { start: 9, stop: 29 },
            black: { start: 30, stop: 39 },
            red: { start: 31, stop: 39 },
            green: { start: 32, stop: 39 },
            yellow: { start: 33, stop: 39 },
            blue: { start: 34, stop: 39 },
            magenta: { start: 35, stop: 39 },
            cyan: { start: 36, stop: 39 },
            white: { start: 37, stop: 39 },
            gray: { start: 90, stop: 39 },
            grey: { start: 90, stop: 39 },
            bgBlack: { start: 40, stop: 49 },
            bgRed: { start: 41, stop: 49 },
            bgGreen: { start: 42, stop: 49 },
            bgYellow: { start: 43, stop: 49 },
            bgBlue: { start: 44, stop: 49 },
            bgMagenta: { start: 45, stop: 49 },
            bgCyan: { start: 46, stop: 49 },
            bgWhite: { start: 47, stop: 49 }
        };
    }
    banner(message, args) {
        this.display("green", "white", message, args);
    }
    info(message, args) {
        this.display("white", "cyan", message, args);
    }
    warning(message, args) {
        this.display("yellow", "cyan", message, args);
    }
    error(message, err, args) {
        if (message !== null && message !== undefined && message.length > 0) {
            message = `ERROR: ${message}`;
        }
        else {
            message = "ERROR";
        }
        this.display("red", "red", message, args);
        if (err) {
            console.log(`${this._logPrefix}${this.colorStart("red")}${errorHandler_1.ErrorHandler.format(err)}${this.colorStop("red")}`);
        }
    }
    display(messageColor, argsColor, message, args) {
        if (args && Object.keys(args).length > 0) {
            if (message !== null && message !== undefined && message.length > 0) {
                console.log(`${this._logPrefix}` +
                    `${this.colorStart(messageColor)}${message}: ${this.colorStop(messageColor)}${this.colorStart(argsColor)}${this.arrayToReadable(args)}${this.colorStop(argsColor)}`);
            }
            else {
                console.log(`${this._logPrefix}${this.colorStart(argsColor)}${this.arrayToReadable(args).trim()}${this.colorStop(argsColor)}`);
            }
        }
        else {
            if (message !== null && message !== undefined && message.length > 0) {
                console.log(`${this._logPrefix}${this.colorStart(messageColor)}${message}${this.colorStop(argsColor)}`);
            }
            else {
                console.log("");
            }
        }
    }
    colorStart(color) {
        return this._colorsOn ? `\u001b[${this._colors[color].start}m` : "";
    }
    colorStop(color) {
        return this._colorsOn ? `\u001b[${this._colors[color].stop}m` : "";
    }
    arrayToReadable(args) {
        const retParts = [];
        const objKeys = Object.keys(args);
        if (objKeys.length === 1) {
            if (args[objKeys[0]]) {
                retParts.push(args[objKeys[0]].toString());
            }
            else {
                retParts.push("undefined");
            }
        }
        else {
            objKeys.forEach(objKey => {
                retParts.push(os.EOL);
                retParts.push(`\t${objKey}: `);
                if (args[objKey]) {
                    retParts.push(args[objKey].toString());
                }
                else {
                    retParts.push("undefined");
                }
            });
        }
        return retParts.join("");
    }
    calculateColors(process, noColor) {
        // Logic copied from https://github.com/chalk/supports-color/blob/master/index.js
        if (noColor) {
            return false;
        }
        if (process) {
            if (process.stdout && !process.stdout.isTTY) {
                return false;
            }
            if (process.platform === "win32") {
                return true;
            }
            if (process.env) {
                if ("CI" in process.env) {
                    return ["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI"].some(sign => sign in process.env);
                }
                if ("TEAMCITY_VERSION" in process.env) {
                    return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(process.env.TEAMCITY_VERSION);
                }
                if ("TERM_PROGRAM" in process.env) {
                    if (["iTerm.app", "Hyper", "Apple_Terminal"].indexOf(process.env.TERM_PROGRAM) >= 0) {
                        return true;
                    }
                }
                if (/^(screen|xterm)-256(?:color)?/.test(process.env.TERM)) {
                    return true;
                }
                if (/^screen|^xterm|^vt100|color|ansi|cygwin|linux/i.test(process.env.TERM)) {
                    return true;
                }
                if ("COLORTERM" in process.env) {
                    return true;
                }
                if (process.env.TERM === "dumb") {
                    return false;
                }
            }
        }
        return false;
    }
}
exports.DisplayLogger = DisplayLogger;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
