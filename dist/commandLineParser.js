"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Command line parser for CLI
 */
class CommandLineParser {
    parse(argv) {
        const badParams = [];
        if (argv) {
            if (argv.length > 0) {
                this._interpreter = argv[0];
            }
            if (argv.length > 1) {
                this._script = argv[1];
            }
            let argStart = 2;
            if (argv.length > 2) {
                if (!argv[2].startsWith("--")) {
                    this._command = argv[2];
                    argStart++;
                }
            }
            if (argv.length > argStart) {
                for (let i = argStart; i < argv.length; i++) {
                    let arg = argv[i];
                    if (arg.startsWith("--")) {
                        this._arguments = this._arguments || {};
                        arg = arg.substring(2);
                        const eqIndex = arg.indexOf("=");
                        if (eqIndex === -1) {
                            this._arguments[arg] = null;
                        }
                        else {
                            this._arguments[arg.substring(0, eqIndex)] = arg.substring(eqIndex + 1);
                        }
                    }
                    else {
                        badParams.push(arg);
                    }
                }
            }
        }
        return badParams;
    }
    getInterpreter() {
        return this._interpreter;
    }
    getScript() {
        return this._script;
    }
    getCommand() {
        return this._command;
    }
    getStringArgument(argumentName) {
        if (this.hasArgument(argumentName)) {
            const arg = this._arguments[argumentName];
            delete this._arguments[argumentName];
            if (arg === null) {
                return arg;
            }
            else {
                if (arg.length >= 2 && arg.startsWith("\"") && arg.endsWith("\"")) {
                    return arg.substring(1, arg.length - 1).trim();
                }
                else if (arg.length >= 2 && arg.startsWith("'") && arg.endsWith("'")) {
                    return arg.substring(1, arg.length - 1).trim();
                }
                else {
                    return arg.trim();
                }
            }
        }
        else {
            return undefined;
        }
    }
    getNumberArgument(argumentName) {
        if (this.hasArgument(argumentName)) {
            const arg = this._arguments[argumentName];
            // Regex from here https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseFloat
            if (/^(\-|\+)?([0-9]+(\.[0-9]+)?)$/.test(arg)) {
                delete this._arguments[argumentName];
                return parseFloat(arg);
            }
            else {
                return undefined;
            }
        }
        else {
            return undefined;
        }
    }
    hasArgument(argumentName) {
        return this._arguments !== undefined && (argumentName in this._arguments);
    }
}
exports.CommandLineParser = CommandLineParser;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
