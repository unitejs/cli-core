"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Tests for FileLogger.
 */
const Chai = require("chai");
const os = require("os");
const Sinon = require("sinon");
const fileLogger_1 = require("../../../dist/fileLogger");
describe("FileLogger", () => {
    let sandbox;
    let stubFileSystem;
    let fileWriteTextSpy;
    let originalConsoleLog;
    beforeEach(() => {
        sandbox = Sinon.sandbox.create();
        stubFileSystem = {};
        stubFileSystem.pathGetDirectory = sandbox.stub().returns("test/unit/temp/");
        stubFileSystem.pathGetFilename = sandbox.stub().returns("test.txt");
        stubFileSystem.directoryExists = (directoryName) => __awaiter(this, void 0, void 0, function* () { return Promise.resolve(false); });
        stubFileSystem.directoryCreate = (directoryName) => __awaiter(this, void 0, void 0, function* () { return Promise.resolve(); });
        stubFileSystem.fileExists = (directoryName, fileName) => __awaiter(this, void 0, void 0, function* () { return Promise.resolve(false); });
        stubFileSystem.fileDelete = (directoryName, fileName) => __awaiter(this, void 0, void 0, function* () { return Promise.resolve(); });
        stubFileSystem.fileWriteText = (directoryName, fileName, contents, append) => __awaiter(this, void 0, void 0, function* () { return Promise.resolve(); });
        fileWriteTextSpy = Sinon.spy(stubFileSystem, "fileWriteText");
        originalConsoleLog = console.log;
        console.log = (message, ...optionalParams) => {
            if (message && message.indexOf("@@@") < 0 && !message.startsWith("ERROR: ")) {
                originalConsoleLog(message, ...optionalParams);
            }
        };
    });
    afterEach(() => __awaiter(this, void 0, void 0, function* () {
        sandbox.restore();
        console.log = originalConsoleLog;
    }));
    it("can be created", () => {
        const obj = new fileLogger_1.FileLogger("test/unit/temp/test.txt", stubFileSystem);
        Chai.should().exist(obj);
    });
    describe("initialise", () => {
        it("can be called with existing directory", () => __awaiter(this, void 0, void 0, function* () {
            stubFileSystem.directoryExists = (directoryName) => __awaiter(this, void 0, void 0, function* () { return Promise.resolve(true); });
            const directoryCreateSpy = sandbox.spy(stubFileSystem, "directoryCreate");
            const obj = new fileLogger_1.FileLogger("test/unit/temp/test.txt", stubFileSystem);
            return obj.initialise()
                .then(() => __awaiter(this, void 0, void 0, function* () {
                Chai.expect(directoryCreateSpy.called).to.equal(false);
                return obj.closedown();
            }));
        }));
        it("can be called with no existing directory", () => __awaiter(this, void 0, void 0, function* () {
            const directoryCreateSpy = sandbox.spy(stubFileSystem, "directoryCreate");
            const obj = new fileLogger_1.FileLogger("test/unit/temp/test.txt", stubFileSystem);
            return obj.initialise()
                .then(() => __awaiter(this, void 0, void 0, function* () {
                Chai.expect(directoryCreateSpy.called).to.equal(true);
                return obj.closedown();
            }));
        }));
        it("can be called with existing file", () => __awaiter(this, void 0, void 0, function* () {
            stubFileSystem.fileExists = (directoryName, fileName) => __awaiter(this, void 0, void 0, function* () { return Promise.resolve(true); });
            const fileDeleteSpy = sandbox.spy(stubFileSystem, "fileDelete");
            const obj = new fileLogger_1.FileLogger("test/unit/temp/test.txt", stubFileSystem);
            return obj.initialise()
                .then(() => __awaiter(this, void 0, void 0, function* () {
                Chai.expect(fileDeleteSpy.called).to.equal(true);
                return obj.closedown();
            }));
        }));
        it("can throw an error", () => __awaiter(this, void 0, void 0, function* () {
            stubFileSystem.fileExists = (directoryName, fileName) => __awaiter(this, void 0, void 0, function* () { return Promise.reject(new Error("kaboom")); });
            const obj = new fileLogger_1.FileLogger("test/unit/temp/test.txt", stubFileSystem);
            return obj.initialise()
                .catch((err) => __awaiter(this, void 0, void 0, function* () {
                Chai.expect(err).not.to.equal(undefined);
                return obj.closedown();
            }));
        }));
    });
    describe("closedown", () => {
        it("can be called even without initialise", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new fileLogger_1.FileLogger("test/unit/temp/test.txt", stubFileSystem);
            return obj.closedown()
                .then(() => {
                Chai.should().exist(obj);
            });
        }));
    });
    describe("banner", () => {
        it("can be called with null message and no args", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new fileLogger_1.FileLogger("test/unit/temp/test.txt", stubFileSystem);
            obj.banner(null);
            yield obj.closedown();
            Chai.expect(fileWriteTextSpy.args[0][2]).to.equal(os.EOL);
        }));
        it("can be called with undefined message and no args", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new fileLogger_1.FileLogger("test/unit/temp/test.txt", stubFileSystem);
            obj.banner(undefined);
            yield obj.closedown();
            Chai.expect(fileWriteTextSpy.args[0][2]).to.equal(os.EOL);
        }));
        it("can be called with empty message and no args", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new fileLogger_1.FileLogger("test/unit/temp/test.txt", stubFileSystem);
            obj.banner("");
            yield obj.closedown();
            Chai.expect(fileWriteTextSpy.args[0][2]).to.equal(os.EOL);
        }));
        it("can be called with message and no args", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new fileLogger_1.FileLogger("test/unit/temp/test.txt", stubFileSystem);
            obj.banner("message");
            yield obj.closedown();
            Chai.expect(fileWriteTextSpy.args[0][2]).to.equal(`===  message${os.EOL}`);
        }));
        it("can be called with message and args", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new fileLogger_1.FileLogger("test/unit/temp/test.txt", stubFileSystem);
            obj.banner("message", { arg1: "foo", arg2: "bar" });
            yield obj.closedown();
            Chai.expect(fileWriteTextSpy.args[0][2]).to.equal(`===  message${os.EOL}\t\targ1: "foo"${os.EOL}\t\targ2: "bar"${os.EOL}`);
        }));
    });
    describe("info", () => {
        it("can be called with message and no args", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new fileLogger_1.FileLogger("test/unit/temp/test.txt", stubFileSystem);
            obj.info("message");
            yield obj.closedown();
            Chai.expect(fileWriteTextSpy.args[0][2]).to.equal(`INFO: message${os.EOL}`);
        }));
        it("can be called with message and args", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new fileLogger_1.FileLogger("test/unit/temp/test.txt", stubFileSystem);
            obj.info("message", { arg1: "foo", arg2: "bar" });
            yield obj.closedown();
            Chai.expect(fileWriteTextSpy.args[0][2]).to.equal(`INFO: message${os.EOL}\t\targ1: "foo"${os.EOL}\t\targ2: "bar"${os.EOL}`);
        }));
    });
    describe("warning", () => {
        it("can be called with message and no args", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new fileLogger_1.FileLogger("test/unit/temp/test.txt", stubFileSystem);
            obj.warning("message");
            yield obj.closedown();
            Chai.expect(fileWriteTextSpy.args[0][2]).to.equal(`WARNING: message${os.EOL}`);
        }));
        it("can be called with message and args", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new fileLogger_1.FileLogger("test/unit/temp/test.txt", stubFileSystem);
            obj.warning("message", { arg1: "foo", arg2: "bar" });
            yield obj.closedown();
            Chai.expect(fileWriteTextSpy.args[0][2]).to.equal(`WARNING: message${os.EOL}\t\targ1: "foo"${os.EOL}\t\targ2: "bar"${os.EOL}`);
        }));
    });
    describe("error", () => {
        it("can be called with message, no error and no args", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new fileLogger_1.FileLogger("test/unit/temp/test.txt", stubFileSystem);
            obj.error("message");
            yield obj.closedown();
            Chai.expect(fileWriteTextSpy.args[0][2]).to.equal(`ERROR: message${os.EOL}`);
        }));
        it("can be called with message, no error and args", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new fileLogger_1.FileLogger("test/unit/temp/test.txt", stubFileSystem);
            obj.error("message", undefined, { arg1: "foo", arg2: "bar" });
            yield obj.closedown();
            Chai.expect(fileWriteTextSpy.args[0][2]).to.equal(`ERROR: message${os.EOL}\t\targ1: "foo"${os.EOL}\t\targ2: "bar"${os.EOL}`);
        }));
        it("can be called with message, error and args", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new fileLogger_1.FileLogger("test/unit/temp/test.txt", stubFileSystem);
            obj.error("message", new Error("@@@kaboom"), { arg1: "foo", arg2: "bar" });
            yield obj.closedown();
            Chai.expect(fileWriteTextSpy.args[0][2]).to.equal(`ERROR: message${os.EOL}\t\targ1: \"foo\"${os.EOL}\t\targ2: \"bar\"${os.EOL}EXCEPTION: @@@kaboom${os.EOL}`);
        }));
    });
    describe("flushData", () => {
        it("can call on timer", () => __awaiter(this, void 0, void 0, function* () {
            const setIntervalStub = Sinon.stub(global, "setInterval");
            const obj = new fileLogger_1.FileLogger("test/unit/temp/test.txt", stubFileSystem);
            yield obj.initialise();
            obj.error("message", undefined, { arg1: "foo", arg2: "bar" });
            const flushData = setIntervalStub.args[0][0];
            flushData();
            Chai.expect(fileWriteTextSpy.args[0][2]).to.equal(`ERROR: message${os.EOL}\t\targ1: "foo"${os.EOL}\t\targ2: "bar"${os.EOL}`);
            yield obj.closedown();
        }));
        it("can throw an error", () => __awaiter(this, void 0, void 0, function* () {
            const consoleLogSpy = sandbox.spy(console, "log");
            stubFileSystem.fileWriteText = (directoryName, fileName, contents, append) => __awaiter(this, void 0, void 0, function* () { return Promise.reject(new Error("kaboom")); });
            const obj = new fileLogger_1.FileLogger("test/unit/temp/test.txt", stubFileSystem);
            obj.error("message");
            yield obj.closedown();
            Chai.expect(consoleLogSpy.args[0][0]).to.equal("ERROR: Logging To File 'test.txt': kaboom");
        }));
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
