"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Tests for WebSecureClient.
 */
const Chai = require("chai");
const https = require("https");
const Sinon = require("sinon");
const webSecureClient_1 = require("../../../dist/webSecureClient");
describe("WebSecureClient", () => {
    let sandbox;
    beforeEach(() => {
        sandbox = Sinon.createSandbox();
    });
    afterEach(() => __awaiter(this, void 0, void 0, function* () {
        sandbox.restore();
    }));
    it("can be created", () => {
        const obj = new webSecureClient_1.WebSecureClient();
        Chai.should().exist(obj);
    });
    describe("getText", () => {
        it("can be called url undefined", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new webSecureClient_1.WebSecureClient();
            try {
                yield obj.getText(undefined);
            }
            catch (err) {
                Chai.expect(err).to.contain("Invalid");
            }
        }));
        it("can be called and return an error", () => __awaiter(this, void 0, void 0, function* () {
            sandbox.stub(https, "get").throws(new Error("Invalid"));
            const obj = new webSecureClient_1.WebSecureClient();
            try {
                yield obj.getText("https://a.com");
            }
            catch (err) {
                Chai.expect(err.message).to.contain("Invalid");
            }
        }));
        it("can return an error", () => __awaiter(this, void 0, void 0, function* () {
            const requestMock = {
                on: (type, cb) => {
                    if (type === "error") {
                        cb(new Error("Invalid"));
                    }
                }
            };
            sandbox.stub(https, "get").returns(requestMock);
            const obj = new webSecureClient_1.WebSecureClient();
            try {
                yield obj.getText("https://a.com");
            }
            catch (err) {
                Chai.expect(err.message).to.contain("Invalid");
            }
        }));
        it("can timeout", () => __awaiter(this, void 0, void 0, function* () {
            const socketMock = {
                on: (type, cb) => {
                    if (type === "timeout") {
                        cb(new Error("Invalid"));
                    }
                },
                setTimeout: () => {
                }
            };
            const requestMock = {
                on: (type, cb) => {
                    if (type === "socket") {
                        cb(socketMock);
                    }
                },
                abort: () => {
                    throw new Error("Aborted");
                }
            };
            sandbox.stub(https, "get").returns(requestMock);
            const obj = new webSecureClient_1.WebSecureClient();
            try {
                yield obj.getText("https://a.com", 1);
            }
            catch (err) {
                Chai.expect(err.message).to.contain("Aborted");
            }
        }));
        it("can return data", () => __awaiter(this, void 0, void 0, function* () {
            const responseMock = {
                on: (type, cb) => {
                    if (type === "data") {
                        cb("hello");
                    }
                    else if (type === "end") {
                        cb("");
                    }
                }
            };
            const getStub = sandbox.stub(https, "get");
            getStub.callsFake((url, callback) => {
                callback(responseMock);
                return {};
            });
            const obj = new webSecureClient_1.WebSecureClient();
            const data = yield obj.getText("https://a.com");
            Chai.expect(data).to.contain("hello");
        }));
    });
    describe("getJson", () => {
        it("can be called and get data", () => __awaiter(this, void 0, void 0, function* () {
            const responseMock = {
                on: (type, cb) => {
                    if (type === "data") {
                        cb(JSON.stringify({ a: "b", c: [1, 2, 3] }));
                    }
                    else if (type === "end") {
                        cb("");
                    }
                }
            };
            const getStub = sandbox.stub(https, "get");
            getStub.callsFake((url, callback) => {
                callback(responseMock);
                return {};
            });
            const obj = new webSecureClient_1.WebSecureClient();
            const data = yield obj.getJson("https://a.com");
            Chai.expect(data).to.deep.equal({ a: "b", c: [1, 2, 3] });
        }));
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Rlc3QvdW5pdC9zcmMvd2ViU2VjdXJlQ2xpZW50LnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBOztHQUVHO0FBQ0gsNkJBQTZCO0FBRTdCLCtCQUErQjtBQUMvQiwrQkFBK0I7QUFDL0Isa0VBQStEO0FBRS9ELFFBQVEsQ0FBQyxpQkFBaUIsRUFBRSxHQUFHLEVBQUU7SUFDN0IsSUFBSSxPQUEyQixDQUFDO0lBRWhDLFVBQVUsQ0FBQyxHQUFHLEVBQUU7UUFDWixPQUFPLEdBQUcsS0FBSyxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ3BDLENBQUMsQ0FBQyxDQUFDO0lBRUgsU0FBUyxDQUFDLEdBQVMsRUFBRTtRQUNqQixPQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDdEIsQ0FBQyxDQUFBLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxnQkFBZ0IsRUFBRSxHQUFHLEVBQUU7UUFDdEIsTUFBTSxHQUFHLEdBQUcsSUFBSSxpQ0FBZSxFQUFFLENBQUM7UUFDbEMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM3QixDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxTQUFTLEVBQUUsR0FBRyxFQUFFO1FBQ3JCLEVBQUUsQ0FBQyw2QkFBNkIsRUFBRSxHQUFTLEVBQUU7WUFDekMsTUFBTSxHQUFHLEdBQUcsSUFBSSxpQ0FBZSxFQUFFLENBQUM7WUFDbEMsSUFBSTtnQkFDQSxNQUFNLEdBQUcsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7YUFDaEM7WUFBQyxPQUFPLEdBQUcsRUFBRTtnQkFDVixJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7YUFDMUM7UUFDTCxDQUFDLENBQUEsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLG1DQUFtQyxFQUFFLEdBQVMsRUFBRTtZ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SSxJQUFJLEtBQUssS0FBSyxFQUFFO3dCQUN2QixFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7cUJBQ1Y7Z0JBQ0wsQ0FBQzthQUNKLENBQUM7WUFDRixNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztZQUNyQyxPQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsR0FBVyxFQUFFLFFBQXlDLEVBQUUsRUFBRTtnQkFDaEYsUUFBUSxDQUFDLFlBQVksQ0FBQyxDQUFDO2dCQUN2QixPQUFzQixFQUFFLENBQUM7WUFDN0IsQ0FBQyxDQUFDLENBQUM7WUFDSCxNQUFNLEdBQUcsR0FBRyxJQUFJLGlDQUFlLEVBQUUsQ0FBQztZQUNsQyxNQUFNLElBQUksR0FBRyxNQUFNLEdBQUcsQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUM7WUFDaEQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFDLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUM7UUFDNUQsQ0FBQyxDQUFBLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyxDQUFDLENBQUMiLCJmaWxlIjoid2ViU2VjdXJlQ2xpZW50LnNwZWMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRlc3RzIGZvciBXZWJTZWN1cmVDbGllbnQuXG4gKi9cbmltcG9ydCAqIGFzIENoYWkgZnJvbSBcImNoYWlcIjtcbmltcG9ydCB7IENsaWVudFJlcXVlc3QsIEluY29taW5nTWVzc2FnZSB9IGZyb20gXCJodHRwXCI7XG5pbXBvcnQgKiBhcyBodHRwcyBmcm9tIFwiaHR0cHNcIjtcbmltcG9ydCAqIGFzIFNpbm9uIGZyb20gXCJzaW5vblwiO1xuaW1wb3J0IHsgV2ViU2VjdXJlQ2xpZW50IH0gZnJvbSBcIi4uLy4uLy4uL3NyYy93ZWJTZWN1cmVDbGllbnRcIjtcblxuZGVzY3JpYmUoXCJXZWJTZWN1cmVDbGllbnRcIiwgKCkgPT4ge1xuICAgIGxldCBzYW5kYm94OiBTaW5vbi5TaW5vblNhbmRib3g7XG5cbiAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgICAgc2FuZGJveCA9IFNpbm9uLmNyZWF0ZVNhbmRib3goKTtcbiAgICB9KTtcblxuICAgIGFmdGVyRWFjaChhc3luYyAoKSA9PiB7XG4gICAgICAgIHNhbmRib3gucmVzdG9yZSgpO1xuICAgIH0pO1xuXG4gICAgaXQoXCJjYW4gYmUgY3JlYXRlZFwiLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IG9iaiA9IG5ldyBXZWJTZWN1cmVDbGllbnQoKTtcbiAgICAgICAgQ2hhaS5zaG91bGQoKS5leGlzdChvYmopO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoXCJnZXRUZXh0XCIsICgpID0+IHtcbiAgICAgICAgaXQoXCJjYW4gYmUgY2FsbGVkIHVybCB1bmRlZmluZWRcIiwgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgb2JqID0gbmV3IFdlYlNlY3VyZUNsaWVudCgpO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBhd2FpdCBvYmouZ2V0VGV4dCh1bmRlZmluZWQpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgQ2hhaS5leHBlY3QoZXJyKS50by5jb250YWluKFwiSW52YWxpZFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoXCJjYW4gYmUgY2FsbGVkIGFuZCByZXR1cm4gYW4gZXJyb3JcIiwgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgc2FuZGJveC5zdHViKGh0dHBzLCBcImdldFwiKS50aHJvd3MobmV3IEVycm9yKFwiSW52YWxpZFwiKSk7XG4gICAgICAgICAgICBjb25zdCBvYmogPSBuZXcgV2ViU2VjdXJlQ2xpZW50KCk7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGF3YWl0IG9iai5nZXRUZXh0KFwiaHR0cHM6Ly9hLmNvbVwiKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIENoYWkuZXhwZWN0KGVyci5tZXNzYWdlKS50by5jb250YWluKFwiSW52YWxpZFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoXCJjYW4gcmV0dXJuIGFuIGVycm9yXCIsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHJlcXVlc3RNb2NrID0gPENsaWVudFJlcXVlc3Q+e1xuICAgICAgICAgICAgICAgIG9uOiAodHlwZTogc3RyaW5nLCBjYjogKGRhdGE6IEVycm9yKSA9PiB7fSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZSA9PT0gXCJlcnJvclwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYihuZXcgRXJyb3IoXCJJbnZhbGlkXCIpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBzYW5kYm94LnN0dWIoaHR0cHMsIFwiZ2V0XCIpLnJldHVybnMocmVxdWVzdE1vY2spO1xuICAgICAgICAgICAgY29uc3Qgb2JqID0gbmV3IFdlYlNlY3VyZUNsaWVudCgpO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBhd2FpdCBvYmouZ2V0VGV4dChcImh0dHBzOi8vYS5jb21cIik7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBDaGFpLmV4cGVjdChlcnIubWVzc2FnZSkudG8uY29udGFpbihcIkludmFsaWRcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KFwiY2FuIHRpbWVvdXRcIiwgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc29ja2V0TW9jayA9IHtcbiAgICAgICAgICAgICAgICBvbjogKHR5cGU6IHN0cmluZywgY2I6IChkYXRhOiBFcnJvcikgPT4ge30pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGUgPT09IFwidGltZW91dFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYihuZXcgRXJyb3IoXCJJbnZhbGlkXCIpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dDogKCkgPT4ge1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCByZXF1ZXN0TW9jayA9IDxDbGllbnRSZXF1ZXN0Pjxhbnk+e1xuICAgICAgICAgICAgICAgIG9uOiAodHlwZTogc3RyaW5nLCBjYjogKGRhdGE6IGFueSkgPT4ge30pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGUgPT09IFwic29ja2V0XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNiKHNvY2tldE1vY2spO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBhYm9ydDogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBYm9ydGVkXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBzYW5kYm94LnN0dWIoaHR0cHMsIFwiZ2V0XCIpLnJldHVybnMocmVxdWVzdE1vY2spO1xuICAgICAgICAgICAgY29uc3Qgb2JqID0gbmV3IFdlYlNlY3VyZUNsaWVudCgpO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBhd2FpdCBvYmouZ2V0VGV4dChcImh0dHBzOi8vYS5jb21cIiwgMSk7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBDaGFpLmV4cGVjdChlcnIubWVzc2FnZSkudG8uY29udGFpbihcIkFib3J0ZWRcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KFwiY2FuIHJldHVybiBkYXRhXCIsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlTW9jayA9IDxJbmNvbWluZ01lc3NhZ2U+e1xuICAgICAgICAgICAgICAgIG9uOiAodHlwZTogc3RyaW5nLCBjYjogKGRhdGE6IHN0cmluZykgPT4ge30pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGUgPT09IFwiZGF0YVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYihcImhlbGxvXCIpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IFwiZW5kXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNiKFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IGdldFN0dWIgPSBzYW5kYm94LnN0dWIoaHR0cHMsIFwiZ2V0XCIpO1xuICAgICAgICAgICAgKDxhbnk+Z2V0U3R1YikuY2FsbHNGYWtlKCh1cmw6IHN0cmluZywgY2FsbGJhY2s/OiAocmVzOiBJbmNvbWluZ01lc3NhZ2UpID0+IHZvaWQpID0+IHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhyZXNwb25zZU1vY2spO1xuICAgICAgICAgICAgICAgIHJldHVybiA8Q2xpZW50UmVxdWVzdD57fTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29uc3Qgb2JqID0gbmV3IFdlYlNlY3VyZUNsaWVudCgpO1xuICAgICAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IG9iai5nZXRUZXh0KFwiaHR0cHM6Ly9hLmNvbVwiKTtcbiAgICAgICAgICAgIENoYWkuZXhwZWN0KGRhdGEpLnRvLmNvbnRhaW4oXCJoZWxsb1wiKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZShcImdldEpzb25cIiwgKCkgPT4ge1xuICAgICAgICBpdChcImNhbiBiZSBjYWxsZWQgYW5kIGdldCBkYXRhXCIsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlTW9jayA9IDxJbmNvbWluZ01lc3NhZ2U+e1xuICAgICAgICAgICAgICAgIG9uOiAodHlwZTogc3RyaW5nLCBjYjogKGRhdGE6IHN0cmluZykgPT4ge30pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGUgPT09IFwiZGF0YVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYihKU09OLnN0cmluZ2lmeSh7YTogXCJiXCIsIGM6IFsxLCAyLCAzXX0pKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSBcImVuZFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYihcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCBnZXRTdHViID0gc2FuZGJveC5zdHViKGh0dHBzLCBcImdldFwiKTtcbiAgICAgICAgICAgICg8YW55PmdldFN0dWIpLmNhbGxzRmFrZSgodXJsOiBzdHJpbmcsIGNhbGxiYWNrPzogKHJlczogSW5jb21pbmdNZXNzYWdlKSA9PiB2b2lkKSA9PiB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2socmVzcG9uc2VNb2NrKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gPENsaWVudFJlcXVlc3Q+e307XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnN0IG9iaiA9IG5ldyBXZWJTZWN1cmVDbGllbnQoKTtcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBvYmouZ2V0SnNvbihcImh0dHBzOi8vYS5jb21cIik7XG4gICAgICAgICAgICBDaGFpLmV4cGVjdChkYXRhKS50by5kZWVwLmVxdWFsKHthOiBcImJcIiwgYzogWzEsIDIsIDNdfSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufSk7XG4iXX0=
