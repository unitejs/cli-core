"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Tests for WebSecureClient.
 */
const Chai = require("chai");
const https = require("https");
const Sinon = require("sinon");
const webSecureClient_1 = require("../../../dist/webSecureClient");
describe("WebSecureClient", () => {
    let sandbox;
    beforeEach(() => {
        sandbox = Sinon.createSandbox();
    });
    afterEach(() => __awaiter(this, void 0, void 0, function* () {
        sandbox.restore();
    }));
    it("can be created", () => {
        const obj = new webSecureClient_1.WebSecureClient();
        Chai.should().exist(obj);
    });
    describe("getText", () => {
        it("can be called url undefined", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new webSecureClient_1.WebSecureClient();
            try {
                yield obj.getText(undefined);
            }
            catch (err) {
                Chai.expect(err).to.contain("Invalid");
            }
        }));
        it("can be called and return an error", () => __awaiter(this, void 0, void 0, function* () {
            sandbox.stub(https, "get").throws(new Error("Invalid"));
            const obj = new webSecureClient_1.WebSecureClient();
            try {
                yield obj.getText("https://a.com");
            }
            catch (err) {
                Chai.expect(err.message).to.contain("Invalid");
            }
        }));
        it("can return an error", () => __awaiter(this, void 0, void 0, function* () {
            const requestMock = {
                on: (type, cb) => {
                    if (type === "error") {
                        cb(new Error("Invalid"));
                    }
                }
            };
            sandbox.stub(https, "get").returns(requestMock);
            const obj = new webSecureClient_1.WebSecureClient();
            try {
                yield obj.getText("https://a.com");
            }
            catch (err) {
                Chai.expect(err.message).to.contain("Invalid");
            }
        }));
        it("can timeout", () => __awaiter(this, void 0, void 0, function* () {
            const socketMock = {
                on: (type, cb) => {
                    if (type === "timeout") {
                        cb(new Error("Invalid"));
                    }
                },
                setTimeout: () => {
                }
            };
            const requestMock = {
                on: (type, cb) => {
                    if (type === "socket") {
                        cb(socketMock);
                    }
                },
                abort: () => {
                    throw new Error("Aborted");
                }
            };
            sandbox.stub(https, "get").returns(requestMock);
            const obj = new webSecureClient_1.WebSecureClient();
            try {
                yield obj.getText("https://a.com", 1);
            }
            catch (err) {
                Chai.expect(err.message).to.contain("Aborted");
            }
        }));
        it("can return data", () => __awaiter(this, void 0, void 0, function* () {
            const responseMock = {
                on: (type, cb) => {
                    if (type === "data") {
                        cb("hello");
                    }
                    else if (type === "end") {
                        cb("");
                    }
                }
            };
            const getStub = sandbox.stub(https, "get");
            getStub.callsFake((url, cb) => {
                cb(responseMock);
            });
            const obj = new webSecureClient_1.WebSecureClient();
            const data = yield obj.getText("https://a.com");
            Chai.expect(data).to.contain("hello");
        }));
    });
    describe("getJson", () => {
        it("can be called and get data", () => __awaiter(this, void 0, void 0, function* () {
            const responseMock = {
                on: (type, cb) => {
                    if (type === "data") {
                        cb(JSON.stringify({ a: "b", c: [1, 2, 3] }));
                    }
                    else if (type === "end") {
                        cb("");
                    }
                }
            };
            const getStub = sandbox.stub(https, "get");
            getStub.callsFake((url, cb) => {
                cb(responseMock);
            });
            const obj = new webSecureClient_1.WebSecureClient();
            const data = yield obj.getJson("https://a.com");
            Chai.expect(data).to.deep.equal({ a: "b", c: [1, 2, 3] });
        }));
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
